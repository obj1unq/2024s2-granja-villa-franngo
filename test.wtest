import wollok.game.*
import hector.*
import cultivos.*

describe "tests" {

  test "sembrado de cultivos" {
    assert.equals([], hector.cultivos())
    assert.notThat(hector.hayCultivoEn(hector.position()))
    hector.plantar(creadorMaiz)
    assert.that(hector.hayCultivoEn(hector.position()))
    assert.throwsException({hector.plantar(creadorTomaco)})
    assert.equals(1, hector.cultivos().size())
    hector.position(game.at( hector.position().x()+1, hector.position().y() ))
    assert.doesNotThrowException({hector.plantar(creadorTomaco)})
    assert.that(hector.hayCultivoEn(hector.position()))
    assert.equals(2, hector.cultivos().size())
    assert.throwsException({hector.plantar(creadorTomaco)})
  }

  test "riego y cosecha" {
    assert.throwsException({hector.cosechar()})
    hector.plantar(creadorTomaco)
    assert.that(game.uniqueCollider(hector).esCosechable())
    assert.doesNotThrowException({hector.cosechar()})
    assert.equals(0, hector.cultivos().size())
    assert.equals(1, hector.cosechados().size())
    hector.plantar(creadorMaiz)
    assert.notThat(game.uniqueCollider(hector).esCosechable())
    assert.throwsException({hector.cosechar()})
    hector.regar()
    assert.that(game.uniqueCollider(hector).esCosechable())
    assert.doesNotThrowException({hector.cosechar()})
    assert.equals(0, hector.cultivos().size())
    assert.equals(2, hector.cosechados().size())
    hector.plantar(creadorTrigo)
    assert.notThat(game.uniqueCollider(hector).esCosechable())
    assert.throwsException({hector.cosechar()})
    hector.regar()
    assert.notThat(game.uniqueCollider(hector).esCosechable())
    assert.throwsException({hector.cosechar()})
    hector.regar()
    assert.that(game.uniqueCollider(hector).esCosechable())
    assert.doesNotThrowException({hector.cosechar()})
    assert.equals(0, hector.cultivos().size())
    assert.equals(3, hector.cosechados().size())
  }

  test "ventas" {
    hector.plantar(creadorTomaco)
    hector.cosechar()
    hector.plantar(creadorMaiz)
    hector.regar()
    hector.cosechar()
    hector.plantar(creadorTrigo)
    hector.regar()
    hector.regar()
    hector.cosechar()
    hector.plantar(creadorTrigo)
    hector.regar()
    hector.regar()
    hector.regar()
    hector.cosechar()
    assert.equals(4, hector.cosechados().size())
    assert.equals(0, hector.oroAcumulado())
    hector.vender()
    assert.equals(0, hector.cosechados().size())
    assert.equals(530, hector.oroAcumulado())
  }

}