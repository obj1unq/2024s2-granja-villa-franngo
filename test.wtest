import wollok.game.*
import hector.*
import cultivos.*
import extras.*

describe "tests" {

  method initialize() {
    game.width(10)
    game.height(10)
  }

  test "sembrado de cultivos" {
    assert.equals([], hector.cultivos())
    assert.notThat(hector.hayCultivoEn(hector.position()))
    assert.equals(0, hector.cultivosDeParcela(hector.position()).size())
    hector.plantar(creadorMaiz)
    assert.that(hector.hayCultivoEn(hector.position()))
    assert.equals(1, hector.cultivosDeParcela(hector.position()).size())
    assert.throwsException({hector.plantar(creadorTomaco)})
    assert.equals(1, hector.cultivos().size())
    assert.equals(1, hector.cultivosDeParcela(hector.position()).size())
    hector.position(hector.position().up(1))
    assert.doesNotThrowException({hector.plantar(creadorTomaco)})
    assert.that(hector.hayCultivoEn(hector.position()))
    assert.equals(1, hector.cultivosDeParcela(hector.position()).size())
    assert.equals(2, hector.cultivos().size())
    assert.throwsException({hector.plantar(creadorTomaco)})
  }

  test "riego y cosecha" {
    assert.throwsException({hector.cosechar()})
    hector.plantar(creadorTomaco)
    assert.that(game.uniqueCollider(hector).esCosechable())
    assert.doesNotThrowException({hector.cosechar()})
    assert.equals(0, hector.cultivos().size())
    assert.equals(1, hector.cosechados().size())
    hector.plantar(creadorMaiz)
    assert.notThat(game.uniqueCollider(hector).esCosechable())
    assert.throwsException({hector.cosechar()})
    hector.regar()
    assert.that(game.uniqueCollider(hector).esCosechable())
    assert.doesNotThrowException({hector.cosechar()})
    assert.equals(0, hector.cultivos().size())
    assert.equals(2, hector.cosechados().size())
    hector.plantar(creadorTrigo)
    assert.notThat(game.uniqueCollider(hector).esCosechable())
    assert.throwsException({hector.cosechar()})
    hector.regar()
    assert.notThat(game.uniqueCollider(hector).esCosechable())
    assert.throwsException({hector.cosechar()})
    hector.regar()
    assert.that(game.uniqueCollider(hector).esCosechable())
    assert.doesNotThrowException({hector.cosechar()})
    assert.equals(0, hector.cultivos().size())
    assert.equals(3, hector.cosechados().size())
  }

/*
  test "ventas (sin mercados)" {
    hector.plantar(creadorTomaco)
    hector.cosechar()
    hector.plantar(creadorMaiz)
    hector.regar()
    hector.cosechar()
    hector.plantar(creadorTrigo)
    hector.regar()
    hector.regar()
    hector.cosechar()
    hector.plantar(creadorTrigo)
    hector.regar()
    hector.regar()
    hector.regar()
    hector.cosechar()
    assert.equals(4, hector.cosechados().size())
    assert.equals(0, hector.oroAcumulado())
    hector.vender()
    assert.equals(0, hector.cosechados().size())
    assert.equals(530, hector.oroAcumulado())
  }
*/

  test "ventas (con mercados)" {
    const mercado1= new Mercado(position = game.at(9,9), oroDisponible = 300) //mercancias default (una [])
    game.addVisual(mercado1)
    hector.mercados().add(mercado1)
    const mercado2 = new Mercado(position = game.at(8,3), oroDisponible = 1000) //mercancias default (una [])
    game.addVisual(mercado2)
	  hector.mercados().add(mercado2)
    const mercado3 = new Mercado(position = game.at(2,2), oroDisponible = 100)//mercancias default (una [])
    game.addVisual(mercado3)
	  hector.mercados().add(mercado3)
    hector.position(game.at(4,4))
    assert.throwsException({hector.vender()}) //no está donde haya un mercado
    hector.plantar(creadorTomaco)
    hector.cosechar()
    hector.plantar(creadorMaiz)
    hector.regar()
    hector.cosechar()
    hector.plantar(creadorTrigo)
    hector.regar()
    hector.regar()
    hector.cosechar()
    hector.plantar(creadorTrigo)
    hector.regar()
    hector.regar()
    hector.regar()
    hector.cosechar() //el total de lo cosechado tiene un valor de 530
    hector.position(game.at(8,3)) //hector a la celda donde está el mercado2
    assert.that(hector.hayMercadoEn(hector.position()))
    assert.doesNotThrowException({hector.vender()})
    assert.equals(0, hector.cosechados().size())
    assert.equals(530, hector.oroAcumulado())
    assert.equals(470, mercado2.oroDisponible())
    assert.equals(4, mercado2.mercancias().size())
    hector.position(game.at(7,3))
    hector.plantar(creadorTrigo)
    hector.regar()
    hector.regar()
    hector.regar()
    hector.cosechar()
    hector.plantar(creadorTrigo)
    hector.regar()
    hector.regar()
    hector.regar()
    hector.cosechar()
    hector.plantar(creadorTrigo)
    hector.regar()
    hector.regar()
    hector.regar()
    hector.cosechar() //el total de lo cosechado tiene un valor de 600
    hector.position(game.at(8,3))
    assert.throwsException({hector.vender()})
    assert.equals(3, hector.cosechados().size())
    assert.equals(530, hector.oroAcumulado())
    assert.equals(470, mercado2.oroDisponible())
    assert.equals(4, mercado2.mercancias().size())
  }

  test "aspersores" {
    hector.position(game.at(4,5))
    hector.plantar(creadorTrigo)
    hector.position(hector.position().right(1))
    hector.plantar(creadorTomaco)
    hector.position(hector.position().down(1))
    hector.plantar(creadorTrigo)
    hector.position(hector.position().down(1))
    hector.plantar(creadorMaiz)
    hector.position(hector.position().left(1))
    hector.plantar(creadorTrigo)
    hector.position(hector.position().left(1))
    hector.plantar(creadorMaiz)
    hector.position(hector.position().up(1))
    hector.plantar(creadorMaiz)
    hector.position(hector.position().up(1))
    hector.plantar(creadorTomaco)
    hector.position(hector.position().right(1))
    hector.position(hector.position().down(1)) //hector queda rodeado de 8 cultivos
    hector.ponerAspersor()
    const aspersor = game.uniqueCollider(hector)
    aspersor.regarAlrededor()
    hector.position(hector.position().up(1)) // de vuelta en (4, 5)
    assert.throwsException({hector.cosechar()}) //trigo (no está listo)
    hector.position(hector.position().right(1))
    assert.throwsException({hector.cosechar()}) //tomaco (se fue hacia arriba)
    hector.position(hector.position().down(1))
    assert.throwsException({hector.cosechar()}) //trigo (no está listo)
    hector.position(hector.position().down(1))
    assert.doesNotThrowException({hector.cosechar()}) //maíz (cosechado 1)
    hector.position(hector.position().left(1))
    assert.throwsException({hector.cosechar()}) //trigo (no está listo)
    hector.position(hector.position().left(1))
    assert.doesNotThrowException({hector.cosechar()}) //maiz (cosechado 2)
    hector.position(hector.position().up(1))
    assert.doesNotThrowException({hector.cosechar()}) //maíz (cosechado 3)
    hector.position(hector.position().up(1))
    assert.throwsException({hector.cosechar()}) //tomaco (se fue hacia arriba)
    assert.equals(5, hector.cultivos().size())
    assert.equals(3, hector.cosechados().size())
  }

}